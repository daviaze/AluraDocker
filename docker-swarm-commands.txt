Docker Swarm - O que é?
*Docker Swarm é um orquestrador de containeres, o mesmo dentro de um contexto de um cluster, irá provisionar e regir os containeres
de forma automática, a fim de manter a disponibilidade e a escalabilidade.

-Instalação-
*Instalar docker-machine
*Instalar VirtualBox (Driver para criação de máquinas virtuais leves)

-Comandos do docker machine-
docker-machine create -d virtualbox vm1 [DRIVER DE MÁQUINA VIRTUAL] -> Utiliza a docker machine para criar a máquina virtual;
docker-machine ls -> Visualiza todas as maquinas virtuais instanciadas;
docker-machine start vm1 -> Inicializa a maquina virtual caso não esteja operante;
docker-machine ssh vm1 -> Entra dentro da máquina virtual LINUX;

-Comandos do docker swarm-
docker swarm init --advertise-addr [IP DA MÁQUINA VIRTUAL] -> Para iniciar o swarm, é necessário estar dentro da máquina virtual,
e como boa prática utilizar o --advertise..., com este comando será fixado o ip da máquina em que está sendo configurado
o cluster como a orquestradora, ou manager. Depois que rodar o comando, será disponibilizado na tela o comando para adicionar as outras
máquinas virtuais como operários do cluster, sendo que a primeira por enquanto é a única orquestradora;
docker swarm join-token workr -> Visualiza o comando para adicionar outras máquinas virtuais no swarm como workr (operario);
docker info -> Visualiza algumas especificações, dentre elas se a máquina virtual em questão está configurado em um Swarm ou não;
docker node ls -> Visualiza todos os nós do swarm. OBS: só pode ser utilizado dentro da máquina virtual manager;
docker swarm leave -> Modifica o status da máquina virtual para "Down" para que a mesma seja removida pelo manager;
docker node rm [ID do nó] -> Exclui o nó do swarm;
docker node inspect vm2 -> Visualiza especificações da vm2, dentre elas, o IP daquela máquina virtual. OBS: só pode ser utilizado
dentro da máquina virtual manager;
docker service create -p 8080:3000 [IMAGEM] -> Instancia o container dentro do cluster. OBS: O container precisa ser instanciado como 
um serviço para ser visto no escopo global do cluster, só pode ser utilizado dentro da máquina virtual manager;
docker service ls -> Visualiza todos os serviços;
docker swarm join-token manager -> Visualiza o comando para adicionar outras máquinas como manager;
docker node demote [ID do nó] - Rebaixa o nó para worker para poder elimina-lo;

1º opção para inviabilizar um nó de executar alguma tarefa (RESTRINGINDO O NÓ):
docker node update --availability drain [Nome do nó] - Atualiza o status de viabilidade do nó para Drain, para que o nó manager se torne incapaz de rodar
serviços;
docker node update --availability active [Nome do nó] - Atualiza o status de viabilidade do nó para active, status default;

2º opção para inviabilizar um nó de executar alguma tarefa (RESTRINGINDO O SERVIÇO):
docker service update --constraint-add node.role==worker [ID do nó] - Atualiza a limitação do serviço para rodar somente em nós workers;


#Backup (CASO ACONTEÇA UMA CATASTROFE E O MANAGER SEJA PERDIDO)
cp -r /var/lib/docker/swarm/ backup -> copia o conteúdo de configuração do swarm da pasta default para a pasta atual, em formato json.
OBS: precisa ter permissões administrativas, primeiramente deverá rodar o comodando "sudo su";
cp -r backup /var/lib/docker/swarm/ -> copia tudo do backup pra pasta raiz do swarm;
docker swarm init --force-new-cluster --advertise-addr [IP DA MÁQUINA VIRTUAL] -> Recria o swarm novamente com as mesmas configurações,
com base no backup;

***Portas são compartilhadas entre nós do swarm e são acessíveis a partir de qualquer nó graças ao routing mesh***